/**********************************************************************
 *                                                                    *
 *       This file was auto-generated by the adc_conf.pl script       *
 *                                                                    *
 *                      from zephyr/dts/adc.dtsi                      *
 *                                                                    *
 **********************************************************************/
/*
 * Copyright (c) 2021 Centre National de la Recherche Scientifique
 *
 * CNRS, établissement public à caractère scientifique et technologique,
 * dont le siège est situé 3 rue Michel-Ange, 75794 Paris cedex 16.
 *
 *            Luiz Villa - Projet OwnTech <owntech@laas.fr>
 *        Laboratoire d'analyse et d'architecture des systèmes
 *               LAAS-CNRS - 7, avenue du Colonel Roche
 *                 BP 54200 - 31031 Toulouse cedex 4
 *
 * SPDX-License-Identifier: CECILL-C
 */

/**
 * @file
 * @brief   ADC peripherals configuration generated from devicetree
 *
 * @author  Hugues Larrive <hugues.larrive@laas.fr>
 */

#ifndef ADC_CONF_H
#define ADC_CONF_H

#include "adc_enum.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief   ADC inputs configuration data structure
 */
typedef struct {
    ADC_TypeDef *dev;   /**< ADC device */
    uint8_t chan;       /**< ADC channel */
    uint8_t diff;       /**< 0: single ended | 1: differential ended */
    uint8_t idx;        /**< adcX_readings[] index */
} adc_g4_conf_t;

/**
 * @brief   ADC inputs configuration
 */
static const adc_g4_conf_t adc_config[] = {
    { .dev = ADC2, .chan =  1, .diff = 1, .idx = 0 }, // V1_LOW
    { .dev = ADC1, .chan =  6, .diff = 0, .idx = 0 }, // I1_LOW
    { .dev = ADC2, .chan =  3, .diff = 1, .idx = 1 }, // V2_LOW
    { .dev = ADC1, .chan =  7, .diff = 0, .idx = 1 }, // I2_LOW
    { .dev = ADC2, .chan = 11, .diff = 1, .idx = 2 }, // V_HIGH
    { .dev = ADC1, .chan =  8, .diff = 0, .idx = 2 }, // I_HIGH
    { .dev = ADC1, .chan =  9, .diff = 0, .idx = 3 }, // TEMP
    { .dev = ADC1, .chan = 16, .diff = 0, .idx = 4 }, // TEMP_MCU
    { .dev = ADC1, .chan = 18, .diff = 0, .idx = 5 }, // VREF_MCU
};

static const uint8_t num_adc1_ch = 6;
static const uint8_t num_adc2_ch = 3;

static uint16_t adc1_readings[6] = {};
static uint16_t adc2_readings[3] = {};

#ifdef __cplusplus
}
#endif

#endif /* ADC_CONF_H */
