#!/usr/bin/perl -w
#
# Copyright (c) 2020-2021 Centre National de la Recherche Scientifique
#
# CNRS, établissement public à caractère scientifique et technologique,
# dont le siège est situé 3 rue Michel-Ange, 75794 Paris cedex 16.
#
#            Luiz Villa - Projet OwnTech <owntech@laas.fr>
#        Laboratoire d'analyse et d'architecture des systèmes
#               LAAS-CNRS - 7, avenue du Colonel Roche
#                 BP 54200 - 31031 Toulouse cedex 4
#
# SPDX-License-Identifier: CECILL-C
#
# @author   Hugues Larrive <hugues.larrive@laas.fr>
#
# @brief    This script generate adc_conf.h from the dts

use strict;

my $dts = '../zephyr/dts/adc.dtsi';

my $adc_conf_h;
my $adc_enum_h;


#*********************** generate file headers ************************#

my $header = <<END;
/**********************************************************************
 *                                                                    *
 *       This file was auto-generated by the adc_conf.pl script       *
 *                                                                    *
END
my $dts_path = "from ".$dts; $dts_path =~ s/\.\.\///g;
my $len = length($dts_path); my $tab = " " x ((68 - $len) / 2);
my $fill=''; $fill = ' ' if ($len%2);
$header .= " *$tab$dts_path$tab$fill*\n";
$header .= <<END;
 *                                                                    *
 **********************************************************************/
/*
 * Copyright (c) 2021 Centre National de la Recherche Scientifique
 *
 * CNRS, établissement public à caractère scientifique et technologique,
 * dont le siège est situé 3 rue Michel-Ange, 75794 Paris cedex 16.
 *
 *            Luiz Villa - Projet OwnTech <owntech\@laas.fr>
 *        Laboratoire d'analyse et d'architecture des systèmes
 *               LAAS-CNRS - 7, avenue du Colonel Roche
 *                 BP 54200 - 31031 Toulouse cedex 4
 *
 * SPDX-License-Identifier: CECILL-C
 */

/**
 * \@file
 * \@brief   ADC peripherals configuration generated from devicetree
 *
 * \@author  Hugues Larrive <hugues.larrive\@laas.fr>
 */

#ifndef ADC_CONF_H
#define ADC_CONF_H

END
$adc_conf_h = $header;
$adc_conf_h .= "#include \"adc_enum.h\"\n\n";

$adc_enum_h = $header;
$adc_enum_h =~ s/peripherals configuration/inputs enumeration/;
$adc_enum_h =~ s/ADC_CONF_H/ADC_ENUM_H/g;

my $common = <<END;
#ifdef __cplusplus
extern "C" {
#endif

END
$adc_conf_h .= $common;
$adc_enum_h .= $common;

$adc_enum_h .= <<END;
/**
 * \@brief   Devicetree ADC inputs
 */
typedef enum {
END

$adc_conf_h .= <<END;
/**
 * \@brief   ADC inputs configuration data structure
 */
typedef struct {
    ADC_TypeDef *dev;   /**< ADC device */
    uint8_t chan;       /**< ADC channel */
    uint8_t diff;       /**< 0: single ended | 1: differential ended */
    uint8_t idx;        /**< adcX_readings[] index */
} adc_g4_conf_t;

/**
 * \@brief   ADC inputs configuration
 */
static const adc_g4_conf_t adc_config[] = {
END


#************************ parse the dts file **************************#

open(my $fh, "<", $dts) or die "Can't open < $dts: $!";

my $adc_config;
my $content;

while (my $line = <$fh>) {
    $line =~ s/\/\/.*//;    # remove comments
    chomp $line;
    $content .= $line;
}

$content =~ s/\/\*.*?\*\///g;   # remove multi-line comments
$content =~ s/.*"adc-inputs";.*?([a-z])/$1/;  # remove all content before adc inputs
$content =~ s/ +/ /g;       # remove multiple spaces
$content =~ s/\t+/ /g;      # remove fucking tabs
$content =~ s/ ;/;/g;       # remove fucking spaces before semicolon

my $inputs = $content;
$inputs =~ s/}; };.*/};/;   # remove all content after adc inputs
my @inputs = split(/};/, $inputs); # split inputs into a table

my $num_adc_ch = @inputs;
my $num_adc1_ch = 0;
my $num_adc2_ch = 0;

foreach my $input (@inputs) {
    $input =~ s/ +/ /g;     # remove multiple spaces
    $input =~ s/^ //;       # remove space at the begin of the line

    my $id = $input;
    my $dev = $input;
    my $chan = $input;
    my $diff = '0';
    my $idx;

    $id =~ s/ .*//;
    $id =~ tr/-/_/;
    my $ID = uc $id;
    $adc_enum_h .= "    $ID,\n";

    $dev =~ s/.*io-channels = <&(.*?) .*/$1/;

    $idx = $num_adc1_ch if ($dev eq 'adc1');
    $idx = $num_adc2_ch if ($dev eq 'adc2');

    $num_adc1_ch++ if ($dev eq 'adc1');
    $num_adc2_ch++ if ($dev eq 'adc2');

    $dev =~ s/adc/ADC/;

    $chan =~ s/.*<&adc[1-2] (.*?)>.*/$1/;
    $chan = ' '.$chan if (length($chan) < 2);

    $diff = '1' if ($input =~ m/differential/);

    $adc_conf_h .= <<END;
    { .dev = $dev, .chan = $chan, .diff = $diff, .idx = $idx }, // $ID
END
}

$adc_conf_h .= <<END;
};

static const uint8_t num_adc1_ch = $num_adc1_ch;
static const uint8_t num_adc2_ch = $num_adc2_ch;

static uint16_t adc1_readings[$num_adc1_ch] = {};
static uint16_t adc2_readings[$num_adc2_ch] = {};

END

$adc_enum_h .= <<END;
} dt_adc_input_t;

#define NUM_ADC_INPUTS  ($num_adc_ch)

END


#*********************** generate file footers ************************#

my $footer = <<END;
#ifdef __cplusplus
}
#endif

#endif /* ADC_CONF_H */
END
$adc_conf_h .= $footer;

$footer =~ s/ADC_CONF_H/ADC_ENUM_H/;
$adc_enum_h .= $footer;


#*********************** write to output files ************************#

open(FH, '>', '../src/adc/adc_conf.h');
print FH $adc_conf_h;

open(FH, '>', '../src/adc/adc_enum.h');
print FH $adc_enum_h;
